basePath: /
definitions:
  category.DTO:
    properties:
      id:
        type: integer
      image:
        type: string
      removable:
        type: boolean
      title:
        type: string
    type: object
  dish.DTO:
    properties:
      category:
        $ref: '#/definitions/category.DTO'
      category_id:
        type: integer
      id:
        type: integer
      price:
        type: number
      title:
        type: string
    type: object
  order.CreateDTO:
    properties:
      items:
        items:
          $ref: '#/definitions/order.ItemCreateDTO'
        type: array
    required:
    - items
    type: object
  order.ItemCreateDTO:
    properties:
      id:
        type: integer
      quantity:
        type: integer
    required:
    - id
    - quantity
    type: object
  order.ItemResponseDTO:
    properties:
      dish:
        $ref: '#/definitions/dish.DTO'
      dish_id:
        type: integer
      id:
        type: integer
      order_id:
        type: integer
      quantity:
        type: integer
    type: object
  order.ResponseDTO:
    properties:
      created_at:
        type: string
      id:
        type: integer
      items:
        items:
          $ref: '#/definitions/order.ItemResponseDTO'
        type: array
      status:
        type: integer
      total:
        type: number
      updated_at:
        type: string
      user:
        $ref: '#/definitions/user.ResponseDTO'
      user_id:
        type: integer
    type: object
  order.UpdateDTO:
    properties:
      items:
        items:
          $ref: '#/definitions/order.ItemCreateDTO'
        type: array
      status:
        type: integer
      total:
        type: number
      user_id:
        type: integer
    required:
    - items
    - status
    - total
    - user_id
    type: object
  user.AuthDTO:
    properties:
      email:
        type: string
      password:
        type: string
    required:
    - email
    - password
    type: object
  user.ResponseDTO:
    properties:
      created_at:
        type: string
      email:
        type: string
      id:
        type: integer
      is_admin:
        type: boolean
    type: object
host: localhost:8080
info:
  contact:
    email: vladlent.dev@gmail.com
    name: Vladlen Tereshchenko
    url: https://github.com/VladlenT
  description: Golang backend for Food Ordering portfolio app.
  license:
    name: MIT
  title: Food Ordering Backend
  version: "1.0"
paths:
  /categories:
    get:
      operationId: category-all
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/category.DTO'
            type: array
        "403":
          description: ""
        "404":
          description: ""
      summary: Get all categories
      tags:
      - category
    post:
      consumes:
      - application/json
      operationId: category-create
      parameters:
      - description: Category DTO
        in: body
        name: dto
        required: true
        schema:
          $ref: '#/definitions/category.DTO'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/category.DTO'
        "409":
          description: ""
        "422":
          description: ""
        "500":
          description: ""
      summary: Create new category. Requires admin rights.
      tags:
      - category
  /categories/:id:
    delete:
      operationId: category-delete
      parameters:
      - description: Category id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/category.DTO'
        "401":
          description: ""
        "403":
          description: ""
        "404":
          description: ""
        "500":
          description: ""
      summary: Delete category by id. Requires admin rights.
      tags:
      - category
    get:
      operationId: category-find
      parameters:
      - description: Category id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/category.DTO'
        "403":
          description: ""
        "404":
          description: ""
      summary: Find category by id
      tags:
      - category
    put:
      consumes:
      - application/json
      operationId: category-update
      parameters:
      - description: Category DTO
        in: body
        name: dto
        required: true
        schema:
          $ref: '#/definitions/category.DTO'
      - description: Category id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/category.DTO'
        "401":
          description: ""
        "403":
          description: ""
        "404":
          description: ""
        "500":
          description: ""
      summary: Replace category. Requires admin rights.
      tags:
      - category
  /categories/:id/upload:
    patch:
      consumes:
      - multipart/form-data
      operationId: category-upload
      parameters:
      - description: Category id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - text/plain
      responses:
        "200":
          description: Link to uploaded image
          schema:
            type: string
        "400":
          description: ""
        "401":
          description: ""
        "404":
          description: ""
        "413":
          description: ""
        "415":
          description: ""
        "500":
          description: ""
      summary: Upload image for category. Requires admin rights.
      tags:
      - category
  /dishes:
    get:
      operationId: dish-all
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/dish.DTO'
            type: array
        "403":
          description: ""
        "404":
          description: ""
      summary: Get all dishes
      tags:
      - dish
    post:
      consumes:
      - application/json
      operationId: dish-create
      parameters:
      - description: User info
        in: body
        name: dto
        required: true
        schema:
          $ref: '#/definitions/dish.DTO'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/dish.DTO'
        "409":
          description: ""
        "422":
          description: ""
      summary: Create new dish. Requires admin rights.
      tags:
      - dish
  /dishes/:id:
    delete:
      operationId: dish-delete
      parameters:
      - description: Dish id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dish.DTO'
        "401":
          description: ""
        "403":
          description: ""
        "404":
          description: ""
        "500":
          description: ""
      summary: Delete dish by id. Requires admin rights.
      tags:
      - dish
    get:
      operationId: dish-find
      parameters:
      - description: Dish id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dish.DTO'
        "403":
          description: ""
        "404":
          description: ""
      summary: Find dish by id
      tags:
      - dish
    put:
      consumes:
      - application/json
      operationId: dish-update
      parameters:
      - description: Dish DTO
        in: body
        name: dto
        required: true
        schema:
          $ref: '#/definitions/dish.DTO'
      - description: Dish id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dish.DTO'
        "401":
          description: ""
        "403":
          description: ""
        "404":
          description: ""
        "500":
          description: ""
      summary: Replace dish. Requires admin rights.
      tags:
      - dish
  /orders:
    get:
      description: If requester is admin, it returns all orders. Otherwise, it returns orders only for that user.
      operationId: order-all
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/order.ResponseDTO'
            type: array
        "401":
          description: ""
        "403":
          description: ""
        "404":
          description: ""
        "500":
          description: ""
      summary: Get all orders. Requires auth.
      tags:
      - order
    post:
      consumes:
      - application/json
      operationId: order-create
      parameters:
      - description: Create order DTO
        in: body
        name: dto
        required: true
        schema:
          $ref: '#/definitions/order.CreateDTO'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/order.ResponseDTO'
        "401":
          description: ""
        "403":
          description: ""
        "422":
          description: ""
        "500":
          description: ""
      summary: Create new order. Requires auth.
      tags:
      - order
  /orders/:id:
    put:
      consumes:
      - application/json
      operationId: order-update
      parameters:
      - description: Order update DTO
        in: body
        name: dto
        required: true
        schema:
          $ref: '#/definitions/order.UpdateDTO'
      - description: Order id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/order.ResponseDTO'
        "401":
          description: ""
        "403":
          description: ""
        "404":
          description: ""
        "500":
          description: ""
      summary: Replace order. Requires admin rights.
      tags:
      - order
  /orders/:id/cancel:
    patch:
      operationId: order-cancel
      parameters:
      - description: Order id
        in: path
        name: id
        required: true
        type: integer
      responses:
        "200":
          description: ""
        "401":
          description: ""
        "403":
          description: ""
        "404":
          description: ""
        "500":
          description: ""
      summary: Change order status to 'canceled'. Requires auth.
      tags:
      - order
  /users:
    get:
      operationId: user-get-all
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/user.ResponseDTO'
            type: array
        "401":
          description: ""
      summary: Get all users. Requires admin rights.
      tags:
      - user
    post:
      consumes:
      - application/json
      operationId: user-create
      parameters:
      - description: User info
        in: body
        name: auth
        required: true
        schema:
          $ref: '#/definitions/user.AuthDTO'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/user.ResponseDTO'
        "409":
          description: ""
        "422":
          description: ""
      summary: Create new user
      tags:
      - user
  /users/logout:
    get:
      operationId: user-logout
      responses:
        "200":
          description: ""
        "401":
          description: ""
        "500":
          description: ""
      summary: Logout. Requires auth.
      tags:
      - user
  /users/me:
    get:
      operationId: user-info
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/user.ResponseDTO'
        "401":
          description: ""
      summary: Get info about current user. Requires auth.
      tags:
      - user
  /users/signin:
    post:
      consumes:
      - application/json
      operationId: user-login
      parameters:
      - description: User login data
        in: body
        name: auth
        required: true
        schema:
          $ref: '#/definitions/user.AuthDTO'
      responses:
        "200":
          description: ""
        "403":
          description: ""
        "500":
          description: ""
      summary: Sign in
      tags:
      - user
schemes:
- http
swagger: "2.0"
